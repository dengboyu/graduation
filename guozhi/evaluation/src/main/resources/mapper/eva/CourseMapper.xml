<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gz.evalution.module.eva.dao.CourseDao">

    <!-- 以下代码片段中,course表的别名为RA -->

    <!-- course表的字段 -->
    <sql id ="course_columns">
        RA.id,RA.courseNum,RA.courseName,RA.college,RA.profession,RA.teacher,RA.statu,RA.createTime,RA.updateTime
    </sql>


    <!-- course表的resultMap映射 -->
    <resultMap id="entityResultMap" type="com.gz.evalution.module.eva.entity.CourseEntity">
        <id  property="id"  column="id"/>
        <result  property="courseNum"  column="courseNum"/>
        <result  property="courseName"  column="courseName"/>
        <result  property="college"  column="college"/>
        <result  property="profession"  column="profession"/>
        <result  property="teacher"  column="teacher"/>
        <result  property="statu"  column="statu"/>
        <result  property="createTime"  column="createTime"/>
        <result  property="updateTime"  column="updateTime"/>
    </resultMap>


    <!-- 添加一条记录 -->
    <insert id="insertEntity" parameterType="com.gz.evalution.module.eva.entity.CourseEntity" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO course
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            courseNum,
            courseName,
            college,
            profession,
            teacher,
            statu,
        </trim>
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
            #{id},
            #{courseNum},
            #{courseName},
            #{college},
            #{profession},
            #{teacher},
            #{statu},
        </trim>
    </insert>


    <!-- 批量添加 -->
    <insert id="insertEntityByBatch" parameterType="list" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO course
        <trim prefix="(" suffix=") VALUES" suffixOverrides=",">
            id,
            courseNum,
            courseName,
            college,
            profession,
            teacher,
            statu,
        </trim>
        <foreach collection="list" index="index" item="item" separator=",">
            (
            #{item.id},
            #{item.courseNum},
            #{item.courseName},
            #{item.college},
            #{item.profession},
            #{item.teacher},
            #{item.statu}
            )
        </foreach>
    </insert>


    <!-- 更新一条记录 -->
    <update id="updateEntity" parameterType="com.gz.evalution.module.eva.entity.CourseEntity">
        UPDATE course
        <trim prefix="set" suffixOverrides=",">
            <if test="courseNum != null">
                courseNum = #{courseNum},
            </if>
            <if test="courseName != null">
                courseName = #{courseName},
            </if>
            <if test="college != null">
                college = #{college},
            </if>
            <if test="profession != null">
                profession = #{profession},
            </if>
            <if test="teacher != null">
                teacher = #{teacher},
            </if>
            <if test="statu != null">
                statu = #{statu},
            </if>
        </trim>
        WHERE id = #{id}
    </update>


    <!-- 根据主键删除一条记录 -->
    <delete id="deleteEntity">
        DELETE FROM course WHERE id = #{0}
    </delete>


    <!-- 根据列条件查询实体类信息 -->
    <sql id="whereColumns">
        <if test="id != null">
            AND RA.id = #{id}
        </if>
        <if test="courseNum != null">
            AND RA.courseNum = #{courseNum}
        </if>
        <if test="courseName != null">
            AND RA.courseName = #{courseName}
        </if>
        <if test="college != null">
            AND RA.college = #{college}
        </if>
        <if test="profession != null">
            AND RA.profession = #{profession}
        </if>
        <if test="teacher != null">
            AND RA.teacher = #{teacher}
        </if>
        <if test="statu != null">
            AND RA.statu = #{statu}
        </if>
        <if test="createTime != null">
            AND RA.createTime = #{createTime}
        </if>
        <if test="updateTime != null">
            AND RA.updateTime = #{updateTime}
        </if>
    </sql>


    <!-- 根据主键查找对应实体类 -->
    <select id="findEntityByMainId" resultType="com.gz.evalution.module.eva.entity.CourseEntity">
        SELECT
        <include refid="course_columns"></include>
        FROM course RA
        WHERE id = #{0}
    </select>


    <!-- 根据条件查出来是单条实体类 -->
    <select id="findEntityByOne" parameterType="com.gz.evalution.module.eva.entity.CourseEntity" resultType="com.gz.evalution.module.eva.entity.CourseEntity">
        SELECT
        <include refid="course_columns"></include>
        FROM
        course RA
        <where>
            <include refid="whereColumns"></include>
        </where>
    </select>


    <!-- 根据列条件查找实体类集合 -->
    <select id="findEntityList" parameterType="com.gz.evalution.module.eva.entity.CourseEntity" resultType="com.gz.evalution.module.eva.entity.CourseEntity">
        SELECT
        <include refid="course_columns"></include>
        FROM
        course RA
        <where>
            <include refid="whereColumns"></include>
        </where>
    </select>


    <!-- 查询记录数 -->
    <select id="findEntityCount" parameterType="com.gz.evalution.module.eva.entity.CourseEntity" resultType="long">
        SELECT
        count(1)
        FROM
        course RA
        <where>
            <include refid="whereColumns"></include>
        </where>
    </select>


    <!-- 单表分页查询 -->
    <select id="findPageEntityList" parameterType="map" resultType="com.gz.evalution.module.eva.entity.CourseEntity">
        SELECT
        <include refid="course_columns"></include>
        FROM
        course RA
        <where>
            <include refid="whereColumns"></include>
        </where>
        ORDER BY
        <choose>
            <when test="orderColumn!=null">
                RA.${orderColumn}
            </when>
            <otherwise>
                RA.createTime
            </otherwise>
        </choose>
        <choose>
            <when test="sortColumn!=null">
                ${sortColumn}
            </when>
            <otherwise>
                DESC
            </otherwise>
        </choose>
        LIMIT #{pageStart},#{pageSize}
    </select>


    <!-- 单表分页查询总计数量 -->
    <select id="findPageEntityCount" parameterType="map" resultType="long">
        SELECT
        count(1)
        FROM
        course RA
        <where>
            <include refid="whereColumns"></include>
        </where>
    </select>


	<select id="getCourseEntityList" resultType="java.util.Map">
        SELECT
          C.id,
          C.courseNum,
          C.courseName,
          CO.collegeName,
          P.proName,
          UI.number,
          UI.username
        FROM  course C
        JOIN college CO on college = CO.id
        JOIN profession P on P.id = profession
        LEFT JOIN user_info UI on C.teacher = UI.id
        WHERE c.statu = '1'
    </select>


    <select id="getCourseListByStudent" resultType="java.util.Map" parameterType="string">
        SELECT courseName,courseNum,collegeName,proName,UIF.username,C.id from user_info UI
        LEFT JOIN course C ON UI.profession= C.profession
        JOIN college CL ON CL.id = C.college
        JOIN profession PF ON UI.profession = PF.id
        JOIN user_info UIF ON UIF.id = C.teacher
        WHERE UI.id = #{id}
        and C.id not in (
            select couseId from evalution where studentId = #{id}
        )
    </select>


</mapper>