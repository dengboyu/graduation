<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gz.evalution.module.eva.dao.CollegeDao">

    <!-- 以下代码片段中,college表的别名为RA -->

    <!-- college表的字段 -->
    <sql id ="college_columns">
        RA.id,RA.collegeNum,RA.collegeName,RA.startTime,RA.statu,RA.createTime,RA.updateTime
    </sql>

    
    <!-- college表的resultMap映射 -->
    <resultMap id="entityResultMap" type="com.gz.evalution.module.eva.entity.CollegeEntity">
        <id  property="id"  column="id"/>
        <result  property="collegeNum"  column="collegeNum"/>
        <result  property="collegeName"  column="collegeName"/>
        <result  property="startTime"  column="startTime"/>
        <result  property="statu"  column="statu"/>
        <result  property="createTime"  column="createTime"/>
        <result  property="updateTime"  column="updateTime"/>
    </resultMap>


    <!-- 添加一条记录 -->
    <insert id="insertEntity" parameterType="com.gz.evalution.module.eva.entity.CollegeEntity">
        INSERT INTO college
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            collegeNum,
            collegeName,
            startTime,
            statu,
        </trim>
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
            #{id},
            #{collegeNum},
            #{collegeName},
            #{startTime},
            #{statu},
        </trim>
    </insert>


    <!-- 批量添加 -->
    <insert id="insertEntityByBatch" parameterType="list">
        INSERT INTO college
        <trim prefix="(" suffix=") VALUES" suffixOverrides=",">
            id,
            collegeNum,
            collegeName,
            startTime,
            statu,
        </trim>
        <foreach collection="list" index="index" item="item" separator=",">
        (
            #{item.id},
            #{item.collegeNum},
            #{item.collegeName},
            #{item.startTime},
            #{item.statu}
        )
        </foreach>
    </insert>


    <!-- 更新一条记录 -->
    <update id="updateEntity" parameterType="com.gz.evalution.module.eva.entity.CollegeEntity">
        UPDATE college
        <trim prefix="set" suffixOverrides=",">
            <if test="collegeNum != null">
                collegeNum = #{collegeNum},
            </if>
            <if test="collegeName != null">
                collegeName = #{collegeName},
            </if>
            <if test="startTime != null">
                startTime = #{startTime},
            </if>
            <if test="statu != null">
                statu = #{statu},
            </if>
        </trim>
        WHERE id = #{id}
    </update>


    <!-- 根据主键删除一条记录 -->
    <delete id="deleteEntity">
        DELETE FROM college WHERE id = #{0}
    </delete>


    <!-- 根据列条件查询实体类信息 -->
    <sql id="whereColumns">
        <trim suffixOverrides=",">
            <if test="id != null">
                RA.id = #{id},
            </if>
            <if test="collegeNum != null">
                RA.collegeNum = #{collegeNum},
            </if>
            <if test="collegeName != null">
                RA.collegeName = #{collegeName},
            </if>
            <if test="startTime != null">
                RA.startTime = #{startTime},
            </if>
            <if test="statu != null">
                RA.statu = #{statu},
            </if>
            <if test="createTime != null">
                RA.createTime = #{createTime},
            </if>
            <if test="updateTime != null">
                RA.updateTime = #{updateTime},
            </if>
        </trim>
    </sql>


    <!-- 根据主键查找对应实体类 -->
    <select id="findEntityByMainId" resultType="com.gz.evalution.module.eva.entity.CollegeEntity">
        SELECT
            <include refid="college_columns"></include>
        FROM college RA
        WHERE id = #{0}
    </select>


    <!-- 根据条件查出来是单条实体类 -->
    <select id="findEntityByOne" parameterType="com.gz.evalution.module.eva.entity.CollegeEntity" resultType="com.gz.evalution.module.eva.entity.CollegeEntity">
        SELECT
            <include refid="college_columns"></include>
        FROM
            college RA
        <where>
            <include refid="whereColumns"></include>
        </where>
    </select>


    <!-- 根据列条件查找实体类集合 -->
    <select id="findEntityList" parameterType="com.gz.evalution.module.eva.entity.CollegeEntity" resultType="com.gz.evalution.module.eva.entity.CollegeEntity">
        SELECT
            <include refid="college_columns"></include>
        FROM
            college RA
        <where>
            <include refid="whereColumns"></include>
        </where>
    </select>


    <!-- 查询记录数 -->
    <select id="findEntityCount" parameterType="com.gz.evalution.module.eva.entity.CollegeEntity" resultType="long">
        SELECT
            count(1)
        FROM
            college RA
        <where>
            <include refid="whereColumns"></include>
        </where>
    </select>


    <!-- 单表分页查询 -->
    <select id="findPageEntityList" parameterType="map" resultType="com.gz.evalution.module.eva.entity.CollegeEntity">
        SELECT
            <include refid="college_columns"></include>
        FROM
            college RA
        <if test="start!=null and pageSize !=null">
            LIMIT #{start},#{pageSize}
        </if>
    </select>


    <resultMap id="collegeVo" type="com.gz.evalution.module.eva.entity.CollegeVo">
        <id column="Cid" property="id"></id>
        <result column="collegeNum" property="collegeNum"></result>
        <result column="collegeName" property="collegeName"></result>
        <collection property="professionEntityList" ofType="com.gz.evalution.module.eva.entity.ProfessionEntity">
            <id column="Pid" property="id"></id>
            <result column="proNum" property="proNum"></result>
            <result column="proName" property="proName"></result>
        </collection>
    </resultMap>

	<select id="getCollegeVoList" resultMap="collegeVo">
        SELECT
            C.id Cid,
            C.collegeNum ,
            C.collegeName ,
            P.id Pid,
            P.proNum ,
            P.proName
        FROM
            college C
        LEFT JOIN profession P ON C.id = P.collegeId
        <where>
            C.statu = '1'
            AND (P.statu IS null OR P.statu='1')
            <if test="id!=null">
                AND C.id=#{id}
            </if>
        </where>
    </select>


</mapper>